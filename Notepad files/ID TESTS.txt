ID TESTS

package locators;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/**
 * Test class for ID locators on the Open Library website
 */
public class IDTests {
    private WebDriver driver;
    private IDLocators idLocators;

    @BeforeMethod
    public void setUp() {
        System.setProperty("webdriver.chrome.driver", "./Drivers/chromedriver.exe");
        driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.get("https://demoqa.com/");
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
        idLocators = new IDLocators(driver);
    }

    @Test(description = "Exercise 7: Click on Accordian Open using ID")
    public void testAccordianOpen() {
        try {
            // Navigate directly to Accordian page
            driver.get("https://demoqa.com/accordian");

            WebElement accordianOpen = idLocators.getAccordianOpen();
            Assert.assertTrue(accordianOpen.isDisplayed(),
                    "Accordian Open not found using ID");
            System.out.println("PASS: Successfully found Accordian Open using ID");
        } catch (Exception e) {
            Assert.fail("Failed to find Accordian Open with ID: " + e.getMessage());
        }
    }


   @Test(description = "Exercise 15: Find the Full Name input field using ID")
   public void testFullNameInput() {
    try {
        // Navigate to the Text Box page
        driver.get("https://demoqa.com/text-box");

        // Use explicit wait instead of Thread.sleep
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
        WebElement fullNameInput = wait.until(ExpectedConditions.visibilityOf(idLocators.getFullNameInput()));

        Assert.assertTrue(fullNameInput.isDisplayed(),
                "Full Name Input not found using ID");
        System.out.println("PASS: Successfully found Full Name Input using ID");

        // Fill out the Full Name field
        fullNameInput.clear();
        fullNameInput.sendKeys("Jane Doe");

    } catch (Exception e) {
        Assert.fail("Failed to find or interact with Full Name Input: " + e.getMessage());
    }
}


    @Test(description = "Exercise 21: Find the Submit button using ID")
    public void testSubmitButton() {
        try {
            // Navigate directly to Text Box page
            driver.get("https://demoqa.com/text-box");

            WebElement submitButton = idLocators.getSubmitButton();
            Assert.assertTrue(submitButton.isDisplayed(),
                    "Submit Button not found using ID");
            System.out.println("PASS: Successfully found Submit Button Open using ID");
        } catch (Exception e) {
            Assert.fail("Failed to find Submit Button with ID: " + e.getMessage());
        }
    }


   @Test(description = "Exercise 26: Find the Email input field using ID")
   public void testEmailInput() {
    try {
        // Navigate to the Text Box page
        driver.get("https://demoqa.com/text-box");

        // Use explicit wait instead of Thread.sleep
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
        WebElement emailInput = wait.until(ExpectedConditions.visibilityOf(idLocators.getEmailInput()));

        Assert.assertTrue(emailInput.isDisplayed(),
                "Email Input not found using ID");
        System.out.println("PASS: Successfully found Email Input using ID");

        // Fill out the Email field
        emailInput.clear();
        emailInput.sendKeys("JaneDoe@doe.com");

    } catch (Exception e) {
        Assert.fail("Failed to find or interact with Email Input: " + e.getMessage());
    }

  }


   @Test(description = "Exercise 34: Find the Current Address textarea using ID")
   public void testCurrentAddress() {
    try {
        // Navigate to the Text Box page
        driver.get("https://demoqa.com/text-box");

        // Use explicit wait instead of Thread.sleep
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
        WebElement currentAddress = wait.until(ExpectedConditions.visibilityOf(idLocators.getCurrentAddress()));

        Assert.assertTrue(currentAddress.isDisplayed(),
                "Current Address text area not found using ID");
        System.out.println("PASS: Successfully found Current Address text area using ID");

        // Fill out the Current Address text area
        currentAddress.clear();
        currentAddress.sendKeys("15 Street Ave, City, State 00001");

    } catch (Exception e) {
        Assert.fail("Failed to find or interact with Current Address text area: " + e.getMessage());
    }

  }


   @Test(description = "Exercise 48: Find the Permanent Address textarea using ID")
   public void testPermanentAddress() {
    try {
        // Navigate to the Text Box page
        driver.get("https://demoqa.com/text-box");

        // Use explicit wait instead of Thread.sleep
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
        WebElement permanentAddress = wait.until(ExpectedConditions.visibilityOf(idLocators.getPermanentAddress()));

        Assert.assertTrue(permanentAddress.isDisplayed(),
                "Permanent Address text area not found using ID");
        System.out.println("PASS: Successfully found Permanent Address text area using ID");

        // Fill out the Permanent Address text area
        permanentAddress.clear();
        permanentAddress.sendKeys("200054 Street Ave, City, State 00003-4526");

    } catch (Exception e) {
        Assert.fail("Failed to find or interact with Permanent Address text area: " + e.getMessage());
    }

  }


   @Test(description = "Exercise 52: Find the First Name input field in the Registration Form using ID")
   public void testFirstNameInput() {
    try {
        // Navigate to the Text Box page
        driver.get("https://demoqa.com/automation-practice-form");

        // Use explicit wait instead of Thread.sleep
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
        WebElement firstNameInput = wait.until(ExpectedConditions.visibilityOf(idLocators.getFirstNameInput()));

        Assert.assertTrue(firstNameInput.isDisplayed(),
                "First Name input area not found using ID");
        System.out.println("PASS: Successfully found First Name input area using ID");

        // Fill out the First Name input area
        firstNameInput.clear();
        firstNameInput.sendKeys("Avangeline-Montgomery");

    } catch (Exception e) {
        Assert.fail("Failed to find or interact with First Name input area: " + e.getMessage());
    }

  }



   @Test(description = "Exercise 65: Find the Search Box in the Web Tables section using ID")
   public void testSearchBox() {
    try {
        // Navigate to the Text Box page
        driver.get("https://demoqa.com/webtables");

        // Use explicit wait instead of Thread.sleep
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
        WebElement searchBox = wait.until(ExpectedConditions.visibilityOf(idLocators.getSearchBox()));

        Assert.assertTrue(searchBox.isDisplayed(),
                "Search Box not found using ID");
        System.out.println("PASS: Successfully found Search Box using ID");

        // Fill out the First Name input area
        searchBox.clear();
        searchBox.sendKeys("Vega");

    } catch (Exception e) {
        Assert.fail("Failed to find or interact with First Name input area: " + e.getMessage());
    }

  }



   @Test(description = "Exercise 70: Find the Add button in the Web Tables section using ID")
   public void testAddButton() {
    try {
        // Navigate to the Text Box page
        driver.get("https://demoqa.com/webtables");

        // Use explicit wait instead of Thread.sleep
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
        WebElement addButton = wait.until(ExpectedConditions.visibilityOf(idLocators.getAddButton()));

        Assert.assertTrue(addButton.isDisplayed(),
                "Add Button not found using ID");
        System.out.println("PASS: Successfully found Add Button using ID");

        addButton.click();

        // Wait for the registration form modal (popup) to be visible
        WebElement registrationForm = wait.until(
                ExpectedConditions.visibilityOfElementLocated(By.id("registration-form-modal"))
        );

        Assert.assertTrue(registrationForm.isDisplayed(), "Popup registration form did not appear after clicking Add.");
        System.out.println("PASS: Registration form popup appeared after clicking Add");

    } catch (Exception e) {
        Assert.fail("Failed to find or interact with Add Button or popup: " + e.getMessage());
    }
}



   @Test(description = "Exercise 73: Find the Salary input on Registration Form update in Web Tables using ID")
   public void testSalaryInputOnRegistrationForm() {
    try {
        // Navigate to the Web Tables page
        driver.get("https://demoqa.com/webtables");

        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));

        // Click the Add button
        WebElement addButton = wait.until(ExpectedConditions.visibilityOf(idLocators.getAddButton()));
        Assert.assertTrue(addButton.isDisplayed(), "Add Button not found using ID");
        System.out.println("PASS: Successfully found Add Button using ID");
        addButton.click();

        // Wait for the popup form to appear
        WebElement registrationForm = wait.until(
                ExpectedConditions.visibilityOfElementLocated(By.id("registration-form-modal"))
        );
        Assert.assertTrue(registrationForm.isDisplayed(), "Popup registration form did not appear.");
        System.out.println("PASS: Registration form popup appeared after clicking Add");

        // Find and interact with the Salary input field
        WebElement salaryInput = wait.until(ExpectedConditions.visibilityOf(idLocators.getSalaryInput()));
        Assert.assertTrue(salaryInput.isDisplayed(), "Salary Input not found using ID");
        System.out.println("PASS: Successfully found Salary Input using ID");

        // Fill out the Salary input
        salaryInput.clear();
        salaryInput.sendKeys("120000");

    } catch (Exception e) {
        Assert.fail("Failed to find or interact with Salary Input or popup: " + e.getMessage());
    }
}


   @Test(description = "Exercise 78: Find the Department input on Registration Form update in Web Tables using ID")
   public void testDepartmentInputOnRegistrationForm() {
    try {
        // Navigate to the Web Tables page
        driver.get("https://demoqa.com/webtables");

        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));

        // Click the Add button
        WebElement addButton = wait.until(ExpectedConditions.visibilityOf(idLocators.getAddButton()));
        Assert.assertTrue(addButton.isDisplayed(), "Add Button not found using ID");
        System.out.println("PASS: Successfully found Add Button using ID");
        addButton.click();

        // Wait for the popup form to appear
        WebElement registrationForm = wait.until(
                ExpectedConditions.visibilityOfElementLocated(By.id("registration-form-modal"))
        );
        Assert.assertTrue(registrationForm.isDisplayed(), "Popup registration form did not appear.");
        System.out.println("PASS: Registration form popup appeared after clicking Add");

        // Find and interact with the Department input field
        WebElement departmentInput = wait.until(ExpectedConditions.visibilityOf(idLocators.getDepartmentInput()));
        Assert.assertTrue(departmentInput.isDisplayed(), "Department Input not found using ID");
        System.out.println("PASS: Successfully found Department Input using ID");

        // Fill out the Department input
        departmentInput.clear();
        departmentInput.sendKeys("Marketing");

    } catch (Exception e) {
        Assert.fail("Failed to find or interact with Department Input or popup: " + e.getMessage());
    }
}




    @Test(description = "Exercise 98: Find the Submit button on Registration Form update in Web Tables using ID")
    public void testRegistrationSubmitButton() {
        try {
            // Navigate to Web Tables page
            driver.get("https://demoqa.com/webtables");

            Thread.sleep(2000);

            // Click edit button for the first row
            WebElement editButton = driver.findElement(By.cssSelector("span[id='edit-record-1'] svg"));
            editButton.click();

            Thread.sleep(1000);

            // Fill out the form - updating First Name for example
            WebElement firstNameField = driver.findElement(By.id("firstName"));
            firstNameField.clear();
            firstNameField.sendKeys("UpdatedName");

            // Submit the form
            WebElement submitButton = driver.findElement(By.id("submit"));
            submitButton.click();

            Thread.sleep(2000);

            // Confirm the table row has updated value
            WebElement updatedCell = driver.findElement(By.cssSelector(".rt-tr-group div[role='gridcell']:nth-child(1)"));
            String updatedText = updatedCell.getText();

            Assert.assertEquals(updatedText, "UpdatedName", "Name not updated correctly in table.");
            System.out.println("Test Passed: Info updated correctly");

        } catch (Exception e) {
            Assert.fail("Test failed: " + e.getMessage());
        }
    }


   @Test(description = "Exercise 101: Fill out Registration Form and Add in Web Tables using ID")
   public void testInputsOnRegistrationFormSubmit() {
       try {
        // Navigate to the Web Tables page
        driver.get("https://demoqa.com/webtables");

        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));

        // Click the Add button
        WebElement addButton = wait.until(ExpectedConditions.visibilityOf(idLocators.getAddButton()));
        Assert.assertTrue(addButton.isDisplayed(), "Add Button not found using ID");
        System.out.println("PASS: Successfully found Add Button using ID");
        addButton.click();

        // Wait for the popup form to appear
        WebElement registrationForm = wait.until(
                ExpectedConditions.visibilityOfElementLocated(By.id("registration-form-modal"))
        );
        Assert.assertTrue(registrationForm.isDisplayed(), "Popup registration form did not appear.");
        System.out.println("PASS: Registration form popup appeared after clicking Add");

        // Fill out the Department input
        WebElement departmentInput = wait.until(ExpectedConditions.visibilityOf(idLocators.getDepartmentInput()));
        Assert.assertTrue(departmentInput.isDisplayed(), "Department Input not found using ID");
        System.out.println("PASS: Successfully found Department Input using ID");
        departmentInput.clear();
        departmentInput.sendKeys("Marketing");

        // Fill out the Salary input
        WebElement salaryInput = wait.until(ExpectedConditions.visibilityOf(idLocators.getSalaryInput()));
        Assert.assertTrue(salaryInput.isDisplayed(), "Salary Input not found using ID");
        System.out.println("PASS: Successfully found Salary Input using ID");
        salaryInput.clear();
        salaryInput.sendKeys("122000");

        // Fill out the First Name input
        WebElement registrationFirstName = wait.until(ExpectedConditions.visibilityOf(idLocators.getRegistrationFirstName()));
        Assert.assertTrue(registrationFirstName.isDisplayed(), "Registration First Name Input not found using ID");
        System.out.println("PASS: Successfully found Registration First Name Input using ID");
        registrationFirstName.clear();
        registrationFirstName.sendKeys("Clive");

        // Fill out the Last Name input
        WebElement registrationLastName = wait.until(ExpectedConditions.visibilityOf(idLocators.getRegistrationLastName()));
        Assert.assertTrue(registrationLastName.isDisplayed(), "Registration Last Name Input not found using ID");
        System.out.println("PASS: Successfully found Registration Last Name Input using ID");
        registrationLastName.clear();
        registrationLastName.sendKeys("Rufio");

        // Fill out the User Email input
        WebElement registrationUserEmail = wait.until(ExpectedConditions.visibilityOf(idLocators.getRegistrationUserEmail()));
        Assert.assertTrue(registrationUserEmail.isDisplayed(), "Registration User Email Input not found using ID");
        System.out.println("PASS: Successfully found Registration User Email Input using ID");
        registrationUserEmail.clear();
        registrationUserEmail.sendKeys("I.was.hooked@pirates.com");

        // Fill out the Age input
        WebElement registrationAge = wait.until(ExpectedConditions.visibilityOf(idLocators.getRegistrationAge()));
        Assert.assertTrue(registrationAge.isDisplayed(), "Registration Age Input not found using ID");
        System.out.println("PASS: Successfully found Registration Age Input using ID");
        registrationAge.clear();
        registrationAge.sendKeys("45");

        // Submit the form
        WebElement submitButton = driver.findElement(By.id("submit"));
        submitButton.click();

        // Wait for and interact with the search box
        WebElement searchBox = wait.until(ExpectedConditions.visibilityOf(idLocators.getSearchBox()));
        Assert.assertTrue(searchBox.isDisplayed(), "Search Box not found using ID");
        System.out.println("PASS: Successfully found Search Box using ID");
        searchBox.clear();
        searchBox.sendKeys("Rufio");

        // Validate that the new row appears
        WebElement resultRow = wait.until(ExpectedConditions.visibilityOfElementLocated(
            By.xpath("//div[@class='rt-tbody']//div[@role='rowgroup'][1]//div[@role='gridcell'][1][contains(text(),'Clive')]")
        ));
        Assert.assertTrue(resultRow.isDisplayed(), "New row with Clive Rufio not found in table.");
        System.out.println("PASS: New row with submitted data found in table");

        // Optionally verify email
        WebElement emailCell = driver.findElement(By.xpath(
            "//div[@class='rt-tbody']//div[@role='rowgroup'][1]//div[@role='gridcell'][4]"));
        Assert.assertEquals(emailCell.getText(), "I.was.hooked@pirates.com", "Email doesn't match what was submitted.");
        System.out.println("PASS: Email value matches expected");

    } catch (Exception e) {
        Assert.fail("Failed to find or interact with Form Inputs or popup: " + e.getMessage());
    }
}

    @AfterMethod
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }
    }

